tosca_definitions_version: cloudify_dsl_1_2

description: >
  This blueprint creates VM in openstack, then uses the cloudify fabric (SSH) plugin  to install a apache httpd. It doesn't require cfy-Manager, and should be executed   via "cfy cli local execute -w install". It is called simple,
  because it sets up no other infrastructure needed to support the
  application. You need to provide the input credentials for open stack. It's fine t  o use some pre-existing resources like router.


##
##  Imports
#############################


imports:
  - http://www.getcloudify.org/spec/cloudify/3.3/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3/plugin.yaml
#  - types/qalyzer-types.yaml

##
##  Inputs
#############################
inputs:

##
##  Aplication setup inputs
#############################

 # install_riemman_dash:
 #   type: boolean
 #   default: false

##
##  RabbitMQ inputs
#############################

  # rabbitmq_user:
  #   type: string
  #   default: rabbitmq

  # rabbitmq_pass:
  #   type: string
  #   default: ra661tmq

  # rabbitmq_keep_guest_user:
  #   type: boolean
  #   default: false

##
##  Openstack auth. inputs
#############################

  keystone_username:
    type: string

  keystone_password:
    type: string

  keystone_tenant_name:
    type: string

  keystone_url:
    type: string

  region:
    type: string

  nova_url:
    type: string
    default: ''

  neutron_url:
    type: string
    default: ''

## 
##  Openstack Env. Setup
#############################

  external_network_name:
    type: string

  use_existing_internal_router:
    type: boolean
    default: false

  internal_router_name:
    type: string
    default: 'qalyser_router'

  use_existing_internal_network:
    type: boolean
    default: false

  internal_network_name:
    type: string
    default: 'qalyzer_network'

  use_existing_internal_subnet:
    type: boolean
    default: false

  internal_subnet_name:
    type: string
    default: 'qalyzer_subnet'

## 
##  Openstack security group
#############################

  use_existing_security_group:
    type: boolean
    default: false

  security_group_name:
    type: string
    default: riemann_rabbit_security_group

##
## Openstack Key Pair
#############################

  qalyser_server_use_existing_keypair:
    type: boolean
    default: false

  qalyser_server_keypair_name:
    type: string
    default: 'qalizer_server_kp'

  qalyser_server_ssh_key_filename:
    type: string
    default: ~/.ssh/cfy_local_keypair.pem

##
## Openstack instance
#############################

  instance_user:
    type: string
    default: centos

  use_existing_server:
    type: boolean
    default: false

  qalyzer_server_name:
    type: string
    default: qalyzer_server

  qalyzer_server_image_id:
    type: string

  qalyzer_server_flavor_id:
    type: string

##
##  Download Path
#############################

  # langohr_source_url:
  #   type: string
  #   default: http://repository.cloudifysource.org/org/cloudify3/components/langohr.jar

  # daemonize_source_url:
  #   type: string
  #   default: http://repository.cloudifysource.org/org/cloudify3/components/daemonize-1.7.3-7.el7.x86_64.rpm

  # riemann_source_url:
  #   type: string
  #   default: http://repository.cloudifysource.org/org/cloudify3/components/riemann-0.2.6-1.noarch.rpm

  # erlang_source_url:
  #   type: string
  #   default: http://repository.cloudifysource.org/org/cloudify3/components/erlang-17.4-1.el6.x86_64.rpm

  # rabbitmq_source_url:
  #   type: string
  #   default: http://repository.cloudifysource.org/org/cloudify3/components/rabbitmq-server-3.5.3-1.noarch.rpm

##
## DSL Defenitions
###############################

dsl_definitions:

##
## Openstack defenitions
#############################

  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }

##
## Node Templates  
#############################

node_templates:

  qalyser_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_internal_network }
      resource_id: { get_input: internal_network_name }
      openstack_config: *openstack_configuration

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  qalyser_server_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_internal_subnet }
      resource_id: { get_input: internal_subnet_name }
      subnet:
        ip_version: 4
        cidr: 10.67.79.0/24
      openstack_config: *openstack_configuration
    relationships:
      - target: qalyser_network
        type: cloudify.relationships.contained_in
      - target: qalyser_router
        type: cloudify.openstack.subnet_connected_to_router


  external_server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  qalyzer_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: { get_input: use_existing_security_group }
      resource_id: { get_input: security_group_name }
      security_group:
        description: Security group for Riemman RabbitMQ VMs
      rules:
          #ssh port
        - port: 22
          remote_ip_prefix: '0.0.0.0/0'
          #riemman dash port
        # - port: 4567
        #   remote_ip_prefix: '0.0.0.0/0'
        #   #riemann TCP port
        # - port: 5556
        #   remote_ip_prefix: '0.0.0.0/0'
        #   #rabbit MQ dash port          
        # - port: 15672
        #   remote_ip_prefix: '0.0.0.0/0'

  qalyser_router:
    type: cloudify.openstack.nodes.Router
    properties:
      use_external_resource: { get_input: use_existing_internal_router }
      resource_id: { get_input: internal_router_name }
      openstack_config: *openstack_configuration
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  qalyser_server_keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: qalyser_server_use_existing_keypair }
      resource_id: { get_input: qalyser_server_keypair_name }
      private_key_path: { get_input: qalyser_server_ssh_key_filename }
      openstack_config: *openstack_configuration

  qalyser_server:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: { get_input: use_existing_server }
      resource_id: { get_input: qalyzer_server_name }
      install_agent: false
      server:
        image: { get_input: qalyzer_server_image_id }
        flavor: { get_input: qalyzer_server_flavor_id }
      management_network_name: { get_property: [qalyser_network, resource_id] }

    relationships:
      - target: qalyser_server_keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: external_server_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: qalyzer_security_group
        type: cloudify.openstack.server_connected_to_security_group

  # rabbitmq_service:
  #   type: QAlyzer.nodes.rabbitmq
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: qalyser_server

  # riemann_service:
  #   type: QAlyzer.nodes.riemann
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: qalyser_server

  #     - type: riemann_to_rabbitmq
  #       target: rabbitmq_service

  # poc_utils:
  #   type: QAlyzer.nodes.poc_utils
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: qalyser_server

  #     - type: poc_utils_to_rabbitmq
  #       target: rabbitmq_service

  #     - type: poc_utils_to_riemann
  #       target: riemann_service


outputs:

  qalizer:
    description: QAlizer Server
    value:
      host_ip: { get_attribute: [  external_server_ip , floating_ip_address ] }
      host_public_key_path: { get_property: [ qalyser_server_keypair, private_key_path ] }
